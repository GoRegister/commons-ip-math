package net.ripe.commons.ip;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.List;

@RunWith(Parameterized.class)
public class Ipv6DoubleColonTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Parameter(0)
    public String input;

    @Test
    public void test() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("Invalid IPv6 address: '" + input + "'");
        Ipv6.parse(input);
    }

    // Invalid IPv6 examples are taken from http://download.dartware.com/thirdparty/test-ipv6-regex.pl
    @Parameters(name = "{index}: parse({0})")
    public static List<Object> data() {
        return Arrays.asList(new Object[] {
                // Double "::" full
                "::1111:2222:3333:4444:5555:6666::",
                "::2222::4444:5555:6666:7777:8888",
                "::2222:4444::5555:6666:7777:8888",
                "::2222:4444:5555::6666:7777:8888",
                "::2222:4444:5555:6666::7777:8888",
                "::2222:4444:5555:6666:7777::8888",
                "::2222:4444:5555:6666:7777:8888::",
                "1111::3333::5555:6666:7777:8888",
                "1111::3333:4444::6666:7777:8888",
                "1111::3333:4444:5555::7777:8888",
                "1111::3333:4444:5555:6666::8888",
                "1111::3333:4444:5555:6666:7777::",
                "1111:2222::4444::6666:7777:8888",
                "1111:2222::4444:5555::7777:8888",
                "1111:2222::4444:5555:6666::8888",
                "1111:2222::4444:5555:6666:7777::",
                "1111:2222:3333::5555::7777:8888",
                "1111:2222:3333::5555:6666::8888",
                "1111:2222:3333::5555:6666::8888",
                "1111:2222:3333::5555:6666:7777::",
                "1111:2222:3333:4444::6666::8888",
                "1111:2222:3333:4444::6666:7777::",
                "1111:2222:3333:4444:5555::7777::",

                // Double "::" shortened
                "3ffe:b00::1::a",

                // Double "::" with embedded IPv4
                "::2222::4444:5555:6666:1.2.3.4",
                "::2222:3333::5555:6666:1.2.3.4",
                "::2222:3333:4444::6666:1.2.3.4",
                "::2222:3333:4444:5555::1.2.3.4",

                "1111::3333::5555:6666:1.2.3.4",
                "1111::3333:4444::6666:1.2.3.4",
                "1111::3333:4444:5555::1.2.3.4",

                "1111:2222::4444::6666:1.2.3.4",
                "1111:2222::4444:5555::1.2.3.4",

                "1111:2222:3333::5555::1.2.3.4",

                // Fully expanded and has single "::"
                "::1111:2222:3333:4444:5555:6666:7777:8888",
                "1111::2222:3333:4444:5555:6666:7777:8888",
                "1111:2222::3333:4444:5555:6666:7777:8888",
                "1111:2222:3333::4444:5555:6666:7777:8888",
                "1111:2222:3333:4444::5555:6666:7777:8888",
                "1111:2222:3333:4444:5555::6666:7777:8888",
                "1111:2222:3333:4444:5555:6666::7777:8888",
                "1111:2222:3333:4444:5555:6666:7777::8888",
                "1111:2222:3333:4444:5555:6666:7777:8888::",

                // Fully expanded and has single "::" with embedded IPv4
                "::1111:2222:3333:4444:5555:6666:1.2.3.4",
                "1111::2222:3333:4444:5555:6666:1.2.3.4",
                "1111:2222::3333:4444:5555:6666:1.2.3.4",
                "1111:2222:3333::4444:5555:6666:1.2.3.4",
                "1111:2222:3333:4444::5555:6666:1.2.3.4",
                "1111:2222:3333:4444:5555::6666:1.2.3.4",
                "1111:2222:3333:4444:5555:6666::1.2.3.4",
                "1111:2222:3333:4444:5555:6666:1.2.3.4::",
        });
    }
}
